{"version":3,"sources":["redux/index.js","App.js","serviceWorker.js","index.js"],"names":["initialState","todos","persistedState","localStorage","getItem","JSON","parse","store","createStore","state","action","type","task","payload","complete","filter","obj","arr","i","length","subscribe","setItem","stringify","getState","mapDispatchToProps","addTodo","item","changeTodoStatus","deleteFromList","connect","props","useState","text","setText","setFilter","console","log","className","map","index","key","onClick","onSubmit","e","preventDefault","placeholder","onChange","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4877f537.chunk.js","sourcesContent":["import {createStore} from 'redux'\n\n// action creator functions \nexport function addTodo(item) {\n   return {\n      type: \"ADD_TASK\",\n      payload: item\n   }\n}\nexport function changeTodoStatus(item) {\n   return {\n      type: \"COMPLETE\",\n      payload: item\n   }\n}\nexport function deleteFromList(item) {\n   return {\n      type: \"DELETE\",\n      payload: item\n   }\n}\n\nconst initialState = {\n   todos: [\n      // {\n      //    task: \"Clean for 10 minutes\",\n      //    complete: false\n      // },\n      // {\n      //    task: \"plan the special day\",\n      //    complete: false\n      // }, \n   ]\n}\n\nfunction reducer(state = initialState, action) {\n   switch(action.type) {\n      case \"ADD_TASK\":\n         return {\n            ...state,\n             todos: [\n                ...state.todos,\n               {\n                  task: action.payload,\n                  complete: false\n               }\n         ]}\n      case \"DELETE\":\n         return {\n            ...state,\n            todos: [ \n               ...state.todos.filter(obj => obj !== action.payload)\n            ]\n         }\n      case \"COMPLETE\":\n         let arr = [...state.todos]\n         for(let i = 0; i < arr.length; i++) {\n            if(arr[i] === action.payload) {\n               arr[i].complete = !arr[i].complete \n               break\n            }\n         }\n         return {\n            ...state,\n            todos: [...arr]\n         }\n      default:\n         return state\n   }\n}\n\nconst persistedState = localStorage.getItem('reduxState') \n                       ? JSON.parse(localStorage.getItem('reduxState'))\n                       : initialState\n\nconst store = createStore(reducer, persistedState)\nstore.subscribe(() => {\n   localStorage.setItem('reduxState', JSON.stringify(store.getState()))\n})\nexport default store","import React, {useState} from 'react';\nimport {connect} from 'react-redux'\nimport {addTodo, changeTodoStatus, deleteFromList} from './redux'\nimport './App.css';\n\nfunction App(props){\n  const [text, setText] = useState(\"\")\n  const [filter, setFilter] = useState(\"ALL\")\n\n  console.log(props.todos, \"ehhhhhh\")\n\n  const viewAll = (e) => {\n    e.preventDefault()\n    setFilter(\"ALL\")\n  }\n\n  const viewActive = (e) => {\n    e.preventDefault()\n    setFilter(\"ACTIVE\")\n  }\n\n  const viewComplete = (e) => {\n    e.preventDefault()\n    setFilter(\"COMPLETE\")\n  }\n\n  const handleSubmit = (e) => {\n    setText(e.target.value)\n    console.log(text, \"<<<<<<<<<\")\n  }\n\n  const submit = (e) => {\n    e.preventDefault()\n    props.addTodo(text)\n    setText(\"\")\n  }\n\n  return(\n    <div className=\"App-header\">\n      <h1>Redux To-Do List</h1>\n      <ul>\n        {props.todos.length < 1 ? <div><p>Add some tasks below!! :D</p></div> : \n          props.todos.map((item, index) => \n            {\n              switch(filter) {\n                case \"ALL\": return (\n                  <div key={index}>\n                    {item.complete ? \n                      <i onClick={() => props.changeTodoStatus(item)} className=\"far fa-check-square status-icon\"></i> : \n                      <i onClick={() => props.changeTodoStatus(item)} className=\"far fa-square status-icon\"></i>}\n                    <li>{item.task}</li>\n                    <i \n                      onClick={() => props.deleteFromList(item)} \n                      className=\"delete far fa-times-circle\" \n                    \n                    ></i>\n                  </div> )\n                case \"ACTIVE\": return (\n                  !item.complete ? \n                    <div key={index}>\n                      <i onClick={() => props.changeTodoStatus(item)} className=\"far fa-square status-icon\"></i>\n                      <li>{item.task}</li>\n                      <i \n                        onClick={() => props.deleteFromList(item)} \n                        className=\"delete far fa-times-circle\" \n                      \n                      ></i>\n                    </div> : null )\n                case \"COMPLETE\": return (\n                  item.complete ?\n                    <div key={index}>\n                      <i onClick={() => props.changeTodoStatus(item)} className=\"far fa-check-square status-icon\"></i> \n                      <li>{item.task}</li>\n                      <i \n                        onClick={() => props.deleteFromList(item)} \n                        className=\"delete far fa-times-circle\" \n                      \n                      ></i>\n                    </div> : null )\n              }\n            }\n            // <div key={index}>\n            //   {item.complete ? \n            //     <i onClick={() => props.changeTodoStatus(item)} className=\"far fa-check-square status-icon\"></i> : \n            //     <i onClick={() => props.changeTodoStatus(item)} className=\"far fa-square status-icon\"></i>}\n            //   <li>{item.task}</li>\n            //   <i \n            //     onClick={() => props.deleteFromList(item)} \n            //     className=\"delete far fa-times-circle\" \n                \n            //   ></i>\n            // </div>\n        )}\n      \n      </ul>\n      \n      <form onSubmit={submit}>\n        <input type=\"text\" placeholder=\"Enter task here\" onChange={handleSubmit} value={text} />\n        <button type=\"submit\">Add Task</button>\n      </form>\n      \n\n      <footer className=\"\">\n        <p onClick={viewAll}>All</p>\n        <p onClick={viewActive}>Active</p>\n        <p onClick={viewComplete}>Completed</p>\n      </footer>\n\n    </div>\n  )\n}\n\nconst mapStateToProps = (state /*, ownProps*/) => {\n  return {\n    todos: state.todos\n  }\n}\nconst mapDispatchToProps = { addTodo, changeTodoStatus, deleteFromList }\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {Provider} from 'react-redux'\nimport store from './redux'\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nconsole.log(store)\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}